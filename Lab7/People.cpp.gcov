        -:    0:Source:src/People.cpp
        -:    0:Graph:People.gcno
        -:    0:Data:People.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "People.h"
        -:    2:#include <cstdarg>
        -:    3:#include <string>
        -:    4:
    #####:    5:void People::setBirthday(int day, int month, int year) {
    #####:    6:	if (month > 12) throw "Unkorrect month";
    #####:    7:	if (day > 31 || (day > 28 && month == 2)) throw "Unkorrect day";
    #####:    8:	this->day = day;
    #####:    9:	this->month = month;
    #####:   10:	this->year = year;
    #####:   11:}
        -:   12:
    #####:   13:People::People(std::string name,
        -:   14:	std::string secondName,
        -:   15:	uint16_t number,
        -:   16:	Sex sex,
        -:   17:	int day,
        -:   18:	int month,
        -:   19:	int year,
        -:   20:	int height,
        -:   21:	int weight,
    #####:   22:	std::string sity) :
        -:   23:	name(name), 
        -:   24:	secondName(secondName),
        -:   25:	sex(sex),
        -:   26:	height(height), 
        -:   27:	weight(weight),
    #####:   28:	sity(sity) {
    #####:   29:	setBirthday(day, month, year);
    #####:   30:}
        -:   31:
    #####:   32:void People::setInformation(std::string info) {
    #####:   33:	information = info;
    #####:   34:}
        -:   35:
    #####:   36:void People::addHobbies(Hobby hobby) {
    #####:   37:	bool flag{ false };
    #####:   38:	for (const auto& obj : hobbies) if (obj == hobby) flag = true;
    #####:   39:	if (flag) return;
    #####:   40:	hobbies.push_back(hobby);
        -:   41:}
        -:   42:
    #####:   43:void People::addBadHobbies(BadHabbits badHabbit) {
    #####:   44:	bool flag{ false };
    #####:   45:	for (const auto& obj : badHabbits) if (obj == badHabbit) flag = true;
    #####:   46:	if (flag) return;
    #####:   47:	badHabbits.push_back(badHabbit);
        -:   48:}
        -:   49:
    #####:   50:void People::addRequiredHobbies(Hobby hobby) {
    #####:   51:	bool flag{ false };
    #####:   52:	for (const auto& obj : requiredHobbies) if (obj == hobby) flag = true;
    #####:   53:	if (flag) return;
    #####:   54:	requiredHobbies.push_back(hobby);
        -:   55:}
        -:   56:
    #####:   57:void People::addRequiredBadHobbies(BadHabbits badHabbit) {
    #####:   58:	bool flag{ false };
    #####:   59:	for (const auto& obj : requiredBadHabbits) if (obj == badHabbit) flag = true;
    #####:   60:	if (flag) return;
    #####:   61:	requiredBadHabbits.push_back(badHabbit);
        -:   62:}
        -:   63:
    #####:   64:bool People::operator==(const People& obj) {
    #####:   65:	if (this->number == obj.number) return true;
    #####:   66:	return false;
        -:   67:}
